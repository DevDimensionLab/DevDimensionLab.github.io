'use strict';(function(){const b={};b.doc={id:'id',field:['title','content'],store:['title','href']};const a=FlexSearch.create(b);window.geekdocSearchIndex=a,a.add({id:0,href:'/usage/install/',title:"Install",content:"Co-pilot is created with Go and supports multiple platforms including:\n GNU/Linux Windows MacOs  Download co-pilot Install co-pilot with one of the two alternatives\nAlternative 1: Binaries  Download the latest binaries from https://github.com/co-pilot-cli/co-pilot/releases  Alternative 2: Sources Co-pilot sources are available at https://github.com/co-pilot-cli/co-pilot\nClone sources git clone https://github.com/co-pilot-cli/co-pilot.git Compile and install make no need to run make install separately\nHelp co-pilot "}),a.add({id:1,href:'/',title:"Co-pilot",content:"A little “go help” for the Java/Kotlin developers using Maven.  Upgrade your pom.xml dependencies to latest and greatest! Easy and fast Brings feature to the table, not found anywhere else, stay tuned!  Why? No requirements No installs of maven-plugins required, so if you a working in a multi-repo developer environment with lots of 2party dependencies and repos, you can easily upgrade them with co-pilot upgrade 2party.  Natural semantics Brings natural semantics and support for different types of dependencies to the table: Kotlin, 2party, spring-boot (curated dependencies), (other) 3party  Open source Can be used as a library for other go-projects automating the upgrade process   Heads up\n co-pilot rewrites your pom.xml, so make sure that everything committed before testing out co-pilot start with co-pilot format pom, verify that the rewrite of the pom.xml is ok, commit, and from now on you will easily see the diff that co-pilot introduces with co-pilot upgrade \u0026lt;2party|3party|spring-boot|plugins|all\u0026gt; or just use co-pilot status (no rewrite) and manually upgrade your pom.xml based on what is reported as outdated, current option if you need to keep your pom.xml formatting   "}),a.add({id:2,href:'/usage/dependencies/',title:"Dependencies",content:"Co-pilot strives to depend on as few third parties as possible, but some dependencies are optional\nGit Co-pilot uses git for various operations related to cloud-config and templates. Without git installed some functionality might not work as expected.\nWithout git A clean Windows 10 installation without git:\nWith git git installed on the cmd.exe path with git bash:\nMaven Co-pilot uses mvn Maven for some analytics commands.\n"}),a.add({id:3,href:'/usage/',title:"Usages",content:""}),a.add({id:4,href:'/template/ignore/',title:"Ignores",content:"During the merge process of a template into a target directory co-pilot ignores the following files:\nDefault ignore Regardless what is defined in the ignore files, co-pilot will ignore filenames matching:\n[ \u0026#34;Application\u0026#34;, \u0026#34;co-pilot.json\u0026#34;, \u0026#34;.co-pilot.ignore\u0026#34;, \u0026#34;.gitignore\u0026#34;, \u0026#34;.mvn\u0026#34;, \u0026#34;mvnw\u0026#34;, \u0026#34;mvnw.cmd\u0026#34;, \u0026#34;.idea\u0026#34;, \u0026#34;.iml\u0026#34; ] Ignoring filesnames matching Application\nThe first entry Application, in the list above, enables co-pilot to ignore files like WebApplication.kt or FooApplication.java. Files which are typically files containing the @SpringBootApplication. It is important that no template contain critical code inside of these files, as they are ignored during the merge process.\n Definitions in ignore files Co-pilot by default reads the .gitignore file from the template, and ignores all the files matching. In addition a co-pilot.ignore file can be added for files which should exist in the version control, but not be part of the template during merging.\nExample .co-pilot.ignore FooController.kt Note: absolute path is not necessary\nExample .gitignore HELP.md target "}),a.add({id:5,href:'/template/',title:"Templates",content:""}),a.add({id:6,href:'/template/basics/',title:"Basics",content:"Templates is a concept where co-pilot effectively merges one project into another. Templates are added to the cloud-config repo under a templates folder, example, and are later referred to by their folder name in the co-pilot.json file. A template, like most projects, consists of these filetypes:\nFiletypes Filetypes in templates are\n.kt and .java files If a template supplies a .kt or a .java file, the file is copied to its right destination and the package com.example... line in top of the file is replaced to support the target. I with the same path and filename is found in the target, the file is ignored.\n*.properties files If a template supplies a *.properties file the file is parsed by key=value pairs, and merged correctly into the target. If the target is missing a properties file with the same name as the template supplies, the whole file is copied. Co-pilot does not check key=value pairs across properties files.\npom.xml files If a template and the target supplies a pom.xml file, the templates pom.xml following definitions are merged over:\n \u0026lt;dependencies\u0026gt; \u0026lt;dependencyManagement\u0026gt; \u0026lt;build\u0026gt;\u0026lt;plugins\u0026gt;  text files (default) All files not matching the above is eighter copied over if the target does not contain it, or the differences are merged into the end of the targetfile.\nSituations Templates is used in the following situations\nDuring generate See commands generate\nDuring merge See commands merge\nDuring upgrade \u0026ndash;deprecated See commands upgrade\n"}),a.add({id:7,href:'/configuration/cloud/',title:"Cloud",content:"Co-pilot supports cloud configuration for some of its more advanced features. A cloud configuration is simply an available git repository referred to in the local config file ~/.co-pilot/local-config.yaml. An example is shipped with co-pilot at https://github.com/co-pilot-cli/co-pilot-config.\nRequirements The requirements for the cloud config repository is that there exists a template folder, and a deprecated.json and services.json,file on the root level.\nExample - Deprecated.json { \u0026#34;type\u0026#34;: \u0026#34;deprecated\u0026#34;, \u0026#34;data\u0026#34;: { \u0026#34;dependencies\u0026#34;: [ { \u0026#34;groupId\u0026#34;: \u0026#34;log4j\u0026#34;, \u0026#34;artifactId\u0026#34;: \u0026#34;log4j\u0026#34;, \u0026#34;files\u0026#34;: [\u0026#34;src/main/resources/log4j.properties\u0026#34;], \u0026#34;associated\u0026#34;: { \u0026#34;files\u0026#34;: [\u0026#34;src/main/resources...\u0026#34;], \u0026#34;dependencies\u0026#34;: [ { \u0026#34;groupId\u0026#34;: \u0026#34;org.slf4j\u0026#34;, \u0026#34;artifactId\u0026#34;: \u0026#34;slf4j-log4j12\u0026#34;, \u0026#34;files\u0026#34;: [\u0026#34;src/main/resources...\u0026#34;] } ] }, \u0026#34;replacement_templates\u0026#34;: [\u0026#34;logstash-logback\u0026#34;] } ] } } Example - Services.json { \u0026#34;type\u0026#34;: \u0026#34;services\u0026#34;, \u0026#34;data\u0026#34;: [ { \u0026#34;groupId\u0026#34;: \u0026#34;com.example\u0026#34;, \u0026#34;artifactId\u0026#34;: \u0026#34;flyway-demo\u0026#34;, \u0026#34;defaultEnvironment\u0026#34;: \u0026#34;prod\u0026#34;, \u0026#34;environments\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;prod\u0026#34;, \u0026#34;_links\u0026#34;: { \u0026#34;info\u0026#34;: { \u0026#34;href\u0026#34;: \u0026#34;http://localhost:8080/actuator/info\u0026#34; } } }, { \u0026#34;name\u0026#34;: \u0026#34;staging\u0026#34;, \u0026#34;_links\u0026#34;: { \u0026#34;info\u0026#34;: { \u0026#34;href\u0026#34;: \u0026#34;http://localhost:8081/actuator/info\u0026#34; } } } ] } ] } Example - Project-defaults.json This file is overriding the project settings for each working project. disableUpdatesFor, and maxVersionForDependencies adds to the existing co-pilot.json file.\n{ \u0026#34;type\u0026#34;: \u0026#34;project-defaults\u0026#34;, \u0026#34;disableDependencySort\u0026#34;: false, \u0026#34;disableKotlinUpgrade\u0026#34;: false, \u0026#34;disableSpringBootUpgrade\u0026#34;: false, \u0026#34;disableUpgradesFor\u0026#34;: [ { \u0026#34;groupId\u0026#34;: \u0026#34;com.example\u0026#34;, \u0026#34;artifactId\u0026#34;: \u0026#34;artifactId\u0026#34; } ], \u0026#34;maxVersionForDependencies\u0026#34;: [ { \u0026#34;groupId\u0026#34;: \u0026#34;com.example\u0026#34;, \u0026#34;artifactId\u0026#34;: \u0026#34;artifactId\u0026#34;, \u0026#34;maxVersion\u0026#34;: \u0026#34;0.0.1\u0026#34; } ] } "}),a.add({id:8,href:'/configuration/',title:"Configurations",content:""}),a.add({id:9,href:'/configuration/project/',title:"Project",content:"In every co-pilot project and template there should be located a co-pilot.json file describing the project.\nExample co-pilot.json { \u0026#34;language\u0026#34;: \u0026#34;kotlin\u0026#34;, \u0026#34;groupId\u0026#34;: \u0026#34;com.example\u0026#34;, \u0026#34;artifactId\u0026#34;: \u0026#34;app\u0026#34;, \u0026#34;package\u0026#34;: \u0026#34;com.example.app\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;Example REST basic app\u0026#34;, \u0026#34;team\u0026#34;: { \u0026#34;name\u0026#34;: \u0026#34;demo-name\u0026#34;, \u0026#34;email\u0026#34;: \u0026#34;demo-email@example.com\u0026#34; }, \u0026#34;description\u0026#34;: \u0026#34;Demo of new app, generated with spring-boot and co-pilot templates\u0026#34;, \u0026#34;dependencies\u0026#34;: [\u0026#34;web-services\u0026#34;], \u0026#34;templates\u0026#34; : [\u0026#34;dockerfile\u0026#34;, \u0026#34;rest-basic\u0026#34;], \u0026#34;settings\u0026#34;: { \u0026#34;disableDependencySort\u0026#34;: false, \u0026#34;disableKotlinUpgrade\u0026#34;: false, \u0026#34;disableSpringBootUpgrade\u0026#34;: false, \u0026#34;disableUpgradesFor\u0026#34;: [ { \u0026#34;groupId\u0026#34;: \u0026#34;com.example\u0026#34;, \u0026#34;artifactId\u0026#34;: \u0026#34;artifactId\u0026#34; } ], \u0026#34;maxVersionForDependencies\u0026#34;: [ { \u0026#34;groupId\u0026#34;: \u0026#34;com.example\u0026#34;, \u0026#34;artifactId\u0026#34;: \u0026#34;artifactId\u0026#34;, \u0026#34;maxVersion\u0026#34;: \u0026#34;0.0.1\u0026#34; } ] } } The dependencies key in this file refers to spring-boot dependencies. The command co-pilot info --spring-info shows a complete list of all the available dependencies. The templates key refers to templates available in your cloud-config repository.\n"}),a.add({id:10,href:'/usage/basics/',title:"Basics",content:"Most of the co-pilot commands operate on some common principles, target, recursive, and dry-run.\n--target By default co-pilot operates on the current folder similar to tools like git. However a custom --target flag is available for most commands and enables the used to use co-pilot ... --target outside of the working folder.\n--recursive Recursive mode is enabled with --recursive or -r for most commands. This mode starts by building a list of subprojects on the current target, and iteratively working on each subproject. Example of this is the upgrade co-pilot upgrade all -r command which will upgrade the current and all subprojects found in the working directory.\n--dry-run Dry-run mode is enabled with the --dry-run flag, and are meant commands which overwrites files. When dry-run in enabled no files is changed or overwritten. Example co-pilot upgrade all --dry-run is effectively the same as a status printout.\nGit Co-pilot is git aware on the working projects, and will warn the user if it operates on a dirty repository. It will however continue as normal.\nExample INFO[0000] upgrading everything for file webservice/pom.xml WARN[0000] operating on a dirty git repo "}),a.add({id:11,href:'/configuration/local/',title:"Local",content:"The first time running co-pilot a ~/.co-pilot configuration folder is created with a ~/.co-pilot/local-config.yaml file. The contents of this file by default are:\ncloudConfig: git: url: https://github.com/co-pilot-cli/co-pilot-config.git "}),a.add({id:12,href:'/commands/',title:"Commands",content:" _____ _ _ _ / ____| (_) | | | | | ___ ______ _ __ _| | ___ | |_ | | / _ \\______| '_ \\| | |/ _ \\| __| | |___| (_) | | |_) | | | (_) | |_ \\_____\\___/ | .__/|_|_|\\___/ \\__| | | |_| == version: v0.2.25, built: 2020-09-30 10:49 == Co-pilot is a developer tool for automating common tasks on a spring boot project Usage: co-pilot [command] Available Commands: analyze Perform an analyze on a projects clean Clean files and folder in a project config Config settings for co-pilot format Format functionality for a project generate Initializes a maven project with co-pilot files and formatting help Help about any command info Prints info on spring version, dependencies etc init Initializes a maven project with co-pilot files and formatting merge Merge functionalities for files to a project status Status functionality for a project upgrade Upgrade options Flags: --debug turn on debug output -h, --help help for co-pilot Use \u0026quot;co-pilot [command] --help\u0026quot; for more information about a command. "}),a.add({id:13,href:'/commands/upgrade/',title:"Upgrade",content:"Upgrade is a command for upgrading all or specific parts of a project.\nExample usage co-pilot upgrade all --target webservice Example output INFO[0000] upgrading everything for file webservice/pom.xml INFO[0000] outdated kotlin version [1.4.8 =\u0026gt; 1.4.10] INFO[0000] outdated spring-boot version [2.3.1.RELEASE =\u0026gt; 2.3.4.RELEASE] INFO[0000] outdated dependency org.hibernate:hibernate-core [5.2.21.Final =\u0026gt; 5.4.21.Final] INFO[0000] outdated dependency net.logstash.logback:logstash-logback-encoder [6.2 =\u0026gt; 6.4] INFO[0000] sorting pom file with default dependencySort INFO[0000] writing model to pom file: webservice/pom.xml Help Perform upgrade on existing projects Usage: co-pilot upgrade [command] Available Commands: 2party Upgrade all 2party dependencies to project 3party Upgrade all 3party dependencies to project all Upgrade everything in project dependency Upgrade a specific dependency on a project deprecated Remove and replace deprecated dependencies in a project kotlin Upgrade kotlin version in project plugins Upgrade all plugins found in project spring-boot Upgrade spring-boot to the latest version Flags: --dry-run dry run does not write to pom.xml -h, --help help for upgrade -r, --recursive turn on recursive mode --target string Optional target directory (default \u0026quot;.\u0026quot;) Global Flags: --debug turn on debug output "}),a.add({id:14,href:'/commands/status/',title:"Status",content:"Status is a command for printing status on a co-pilot project. By default it outputs available upgrades.\nExample usage co-pilot status Example output INFO[0000] Project status for file ./pom.xml INFO[0000] No update needed, kotlin is the the latest version [1.4.10] INFO[0000] spring boot is the latest version [2.3.4.RELEASE] Help Status functionality for a project Usage: co-pilot status [flags] Flags: -h, --help help for status -r, --recursive turn on recursive mode --show show project status --target string optional target directory (default \u0026quot;.\u0026quot;) Global Flags: --debug turn on debug output "}),a.add({id:15,href:'/commands/merge/',title:"Merge",content:"Merge is a standalone command for merging a specific template into a target. It is the same process used iteratively by generate\nHelp Merge functionalities for files to a project Usage: co-pilot merge [command] Available Commands: pom Merges a pom-file into a project template Merges a template from co-pilot-config text Merges two text files Flags: --from string file to merge -h, --help help for merge Global Flags: --debug turn on debug output "}),a.add({id:16,href:'/commands/init/',title:"Init",content:"Initializes a project with co-pilot files like co-pilot.json. The command also overwrites the pom.xml files with standard formatting and sorting.\nHelp Initializes a maven project with co-pilot files and formatting Usage: co-pilot init [flags] Flags: --config-file string Optional config file --dry-run dry run does not write to pom.xml -h, --help help for init -r, --recursive turn on recursive mode --target string Optional target directory (default \u0026quot;.\u0026quot;) Global Flags: --debug turn on debug output "}),a.add({id:17,href:'/commands/info/',title:"Info",content:"Info is a command for printing various non-project information like spring-info, spring-managed dependencies, and which maven-repositories are defined by mvn\nHelp Prints info on spring version, dependencies etc Usage: co-pilot info [flags] Flags: -h, --help help for info --maven-repositories show current maven repositories --spring-info show spring boot status --spring-managed show spring boot managed dependencies info Global Flags: --debug turn on debug output "}),a.add({id:18,href:'/commands/generate/',title:"Generate",content:"Generate initializes a spring boot project using https://start.spring.io.\nExample co-pilot.json file { \u0026quot;language\u0026quot;: \u0026quot;kotlin\u0026quot;, \u0026quot;groupId\u0026quot;: \u0026quot;com.example\u0026quot;, \u0026quot;artifactId\u0026quot;: \u0026quot;app\u0026quot;, \u0026quot;package\u0026quot;: \u0026quot;com.example.app\u0026quot;, \u0026quot;name\u0026quot;: \u0026quot;Example REST basic app\u0026quot;, \u0026quot;team\u0026quot;: { \u0026quot;name\u0026quot;: \u0026quot;demo-name\u0026quot;, \u0026quot;email\u0026quot;: \u0026quot;demo-email@example.com\u0026quot; }, \u0026quot;description\u0026quot;: \u0026quot;Demo of new app, generated with spring-boot and co-pilot templates\u0026quot;, \u0026quot;dependencies\u0026quot;: [\u0026quot;web-services\u0026quot;], \u0026quot;templates\u0026quot; : [\u0026quot;dockerfile\u0026quot;, \u0026quot;rest-basic\u0026quot;] } This file is the same file used for project-configuration, and is described at project configuration\nExample usage Help Initializes a maven project with co-pilot files and formatting Usage: co-pilot generate [flags] Flags: --config-file string Optional config file -h, --help help for generate --target string Optional target directory (default \u0026quot;.\u0026quot;) Global Flags: --debug turn on debug output "}),a.add({id:19,href:'/commands/format/',title:"Format",content:"Example usage co-pilot format pom --target webservice Example output INFO[0000] formatting for file webservice/pom.xml INFO[0000] sorting pom file with default dependencySort INFO[0000] writing model to pom file: webservice/pom.xml Help Format functionality for a project Usage: co-pilot format [command] Available Commands: inherit Removes manual versions from spring dependencies pom Formats pom.xml and sorts dependencies version Removes version tags and replaces them with property tags Flags: --dry-run dry run does not write to pom.xml -h, --help help for format -r, --recursive turn on recursive mode --target string Optional target directory (default \u0026quot;.\u0026quot;) Global Flags: --debug turn on debug output "}),a.add({id:20,href:'/commands/config/',title:"Config",content:"Help Config settings for co-pilot Usage: co-pilot config [flags] Flags: --cloud-sync sync with cloud config repo -h, --help help for config --reset reset local config --show show local config Global Flags: --debug turn on debug output "}),a.add({id:21,href:'/commands/clean/',title:"Clean",content:"Example usage co-pilot clean --ide --target webservice Example output INFO[0000] Deleted 0 files and 0 directories Help Clean files and folder in a project Usage: co-pilot clean [flags] Flags: --dry-run dry run does not write to pom.xml -h, --help help for clean --ide removes .idea folders and *.iml files -r, --recursive turn on recursive mode --target string Optional target directory (default \u0026quot;.\u0026quot;) Global Flags: --debug turn on debug output "}),a.add({id:22,href:'/commands/analyze/',title:"Analyze",content:"Example usage co-pilot analyze --deps --target webservice Example output INFO[0000] Undeclared and unused dependencies for file webservice/pom.xml INFO[0005] unused declared dependencies com.microsoft.sqlserver:mssql-jdbc INFO[0005] unused declared dependencies org.flywaydb:flyway-core INFO[0005] unused declared dependencies org.jetbrains.kotlin:kotlin-reflect INFO[0005] unused declared dependencies org.jetbrains.kotlin:kotlin-stdlib-jdk8 INFO[0005] unused declared dependencies org.springframework.boot:spring-boot-starter-data-jpa INFO[0005] unused declared dependencies com.h2database:h2 INFO[0005] unused declared dependencies org.springframework.boot:spring-boot-starter-test INFO[0005] unused declared dependencies Finished at: 2020-09-30T12 INFO[0005] used undeclared dependencies org.springframework:spring-beans INFO[0005] used undeclared dependencies org.springframework:spring-context INFO[0005] used undeclared dependencies org.jetbrains.kotlin:kotlin-stdlib INFO[0005] used undeclared dependencies org.springframework.boot:spring-boot-test INFO[0005] used undeclared dependencies org.springframework.data:spring-data-jpa INFO[0005] used undeclared dependencies jakarta.persistence:jakarta.persistence-api INFO[0005] used undeclared dependencies org.springframework.boot:spring-boot-autoconfigure INFO[0005] used undeclared dependencies org.springframework.boot:spring-boot INFO[0005] used undeclared dependencies org.springframework:spring-test INFO[0005] used undeclared dependencies org.junit.jupiter:junit-jupiter-api INFO[0005] used undeclared dependencies org.springframework.boot:spring-boot-test-autoconfigure INFO[0005] used undeclared dependencies org.jetbrains:annotations Help Perform an analyze on a projects Usage: co-pilot analyze [flags] Flags: --deps Show dependency usage -h, --help help for analyze -r, --recursive recursive mode -t, --target string optional target directory (default \u0026quot;.\u0026quot;) Global Flags: --debug turn on debug output "}),a.add({id:23,href:'/categories/',title:"Categories",content:""}),a.add({id:24,href:'/tags/',title:"Tags",content:""})})()