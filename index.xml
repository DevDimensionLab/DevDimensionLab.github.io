<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Co-pilot on Co-pilot-cli</title>
    <link>https://co-pilot-cli.github.io/</link>
    <description>Recent content in Co-pilot on Co-pilot-cli</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Tue, 21 Dec 2021 10:27:32 +0200</lastBuildDate><atom:link href="https://co-pilot-cli.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Install</title>
      <link>https://co-pilot-cli.github.io/usage/install/</link>
      <pubDate>Wed, 30 Sep 2020 10:29:19 +0200</pubDate>
      
      <guid>https://co-pilot-cli.github.io/usage/install/</guid>
      <description>Co-pilot is created with Go and supports multiple platforms including:
 GNU/Linux Windows MacOs  Download co-pilot Install co-pilot with one of the two alternatives
Alternative 1: Binaries  Download the latest binaries from https://github.com/co-pilot-cli/co-pilot/releases  Alternative 2: Sources Co-pilot sources are available at https://github.com/co-pilot-cli/co-pilot
Clone sources git clone https://github.com/co-pilot-cli/co-pilot.git Compile and install make no need to run make install separately
Help co-pilot </description>
    </item>
    
    <item>
      <title>Lint</title>
      <link>https://co-pilot-cli.github.io/commands/lint/</link>
      <pubDate>Tue, 21 Dec 2021 10:27:32 +0200</pubDate>
      
      <guid>https://co-pilot-cli.github.io/commands/lint/</guid>
      <description>Dependencies Some of these commands depends on:
 ktlint  Help Linting commands Usage: co-pilot lint [command] Available Commands: kotlin uses ktlint for linting kotlin code Flags: -h, --help help for lint -r, --recursive turn on recursive mode --target string optional target directory (default &amp;#34;.&amp;#34;) Global Flags: --debug turn on debug output Use &amp;#34;co-pilot lint [command] --help&amp;#34; for more information about a command. Example usage co-pilot lint </description>
    </item>
    
    <item>
      <title>Maven</title>
      <link>https://co-pilot-cli.github.io/commands/maven/</link>
      <pubDate>Tue, 21 Dec 2021 10:27:32 +0200</pubDate>
      
      <guid>https://co-pilot-cli.github.io/commands/maven/</guid>
      <description>Dependencies Some of these commands depends on:
 mvn dot (graphviz)  Help Run maven (mvn) commands Usage: co-pilot maven [command] Available Commands: graph creates a graph for dependencies in a project Flags: -h, --help help for maven -r, --recursive turn on recursive mode --target string optional target directory (default &amp;#34;.&amp;#34;) Global Flags: --debug turn on debug output Use &amp;#34;co-pilot maven [command] --help&amp;#34; for more information about a command. Example usage co-pilot maven </description>
    </item>
    
    <item>
      <title>Query</title>
      <link>https://co-pilot-cli.github.io/commands/query/</link>
      <pubDate>Tue, 21 Dec 2021 10:27:32 +0200</pubDate>
      
      <guid>https://co-pilot-cli.github.io/commands/query/</guid>
      <description>Help Query dependencies in a project Usage: co-pilot query [flags] Flags: -a, --artifactId string artifactId -g, --groupId string groupId -h, --help help for query --target string Optional target directory (default &amp;#34;.&amp;#34;) Global Flags: --debug turn on debug output Example usage co-pilot query </description>
    </item>
    
    <item>
      <title>Dependencies</title>
      <link>https://co-pilot-cli.github.io/usage/dependencies/</link>
      <pubDate>Mon, 05 Oct 2020 11:15:08 +0200</pubDate>
      
      <guid>https://co-pilot-cli.github.io/usage/dependencies/</guid>
      <description>Co-pilot strives to depend on as few third parties as possible, but some dependencies are optional
Git Co-pilot uses git for various operations related to cloud-config and templates. Without git installed some functionality might not work as expected.
Without git A clean Windows 10 installation without git:
With git git installed on the cmd.exe path with git bash:
Maven Co-pilot uses mvn Maven for some analytics commands.</description>
    </item>
    
    <item>
      <title>Ignores</title>
      <link>https://co-pilot-cli.github.io/template/ignore/</link>
      <pubDate>Wed, 30 Sep 2020 13:07:42 +0200</pubDate>
      
      <guid>https://co-pilot-cli.github.io/template/ignore/</guid>
      <description>During the merge process of a template into a target directory co-pilot ignores the following files:
Default ignore Regardless what is defined in the ignore files, co-pilot will ignore filenames matching:
[ &amp;#34;Application&amp;#34;, &amp;#34;co-pilot.json&amp;#34;, &amp;#34;.co-pilot.ignore&amp;#34;, &amp;#34;.gitignore&amp;#34;, &amp;#34;.mvn&amp;#34;, &amp;#34;mvnw&amp;#34;, &amp;#34;mvnw.cmd&amp;#34;, &amp;#34;.idea&amp;#34;, &amp;#34;.iml&amp;#34; ] Ignoring filesnames matching Application
The first entry Application, in the list above, enables co-pilot to ignore files like WebApplication.kt or FooApplication.java. Files which are typically files containing the @SpringBootApplication.</description>
    </item>
    
    <item>
      <title>Basics</title>
      <link>https://co-pilot-cli.github.io/template/basics/</link>
      <pubDate>Wed, 30 Sep 2020 13:07:36 +0200</pubDate>
      
      <guid>https://co-pilot-cli.github.io/template/basics/</guid>
      <description>Templates is a concept where co-pilot effectively merges one project into another. Templates are added to the cloud-config repo under a templates folder, example, and are later referred to by their folder name in the co-pilot.json file. A template, like most projects, consists of these filetypes:
Filetypes Filetypes in templates are
.kt and .java files If a template supplies a .kt or a .java file, the file is copied to its right destination and the package com.</description>
    </item>
    
    <item>
      <title>Cloud</title>
      <link>https://co-pilot-cli.github.io/configuration/cloud/</link>
      <pubDate>Wed, 30 Sep 2020 12:55:39 +0200</pubDate>
      
      <guid>https://co-pilot-cli.github.io/configuration/cloud/</guid>
      <description>Co-pilot supports cloud configuration for some of its more advanced features. A cloud configuration is simply an available git repository referred to in the local config file ~/.co-pilot/local-config.yaml. An example is shipped with co-pilot at https://github.com/co-pilot-cli/co-pilot-config.
Requirements The requirements for the cloud config repository is that there exists a template folder, and a deprecated.json and services.json,file on the root level.
Example - Deprecated.json { &amp;#34;type&amp;#34;: &amp;#34;deprecated&amp;#34;, &amp;#34;data&amp;#34;: { &amp;#34;dependencies&amp;#34;: [ { &amp;#34;groupId&amp;#34;: &amp;#34;log4j&amp;#34;, &amp;#34;artifactId&amp;#34;: &amp;#34;log4j&amp;#34;, &amp;#34;files&amp;#34;: [&amp;#34;src/main/resources/log4j.</description>
    </item>
    
    <item>
      <title>Project</title>
      <link>https://co-pilot-cli.github.io/configuration/project/</link>
      <pubDate>Wed, 30 Sep 2020 12:53:19 +0200</pubDate>
      
      <guid>https://co-pilot-cli.github.io/configuration/project/</guid>
      <description>In every co-pilot project and template there should be located a co-pilot.json file describing the project.
Example co-pilot.json { &amp;#34;language&amp;#34;: &amp;#34;kotlin&amp;#34;, &amp;#34;groupId&amp;#34;: &amp;#34;com.example&amp;#34;, &amp;#34;artifactId&amp;#34;: &amp;#34;app&amp;#34;, &amp;#34;package&amp;#34;: &amp;#34;com.example.app&amp;#34;, &amp;#34;name&amp;#34;: &amp;#34;Example REST basic app&amp;#34;, &amp;#34;team&amp;#34;: { &amp;#34;name&amp;#34;: &amp;#34;demo-name&amp;#34;, &amp;#34;email&amp;#34;: &amp;#34;demo-email@example.com&amp;#34; }, &amp;#34;description&amp;#34;: &amp;#34;Demo of new app, generated with spring-boot and co-pilot templates&amp;#34;, &amp;#34;dependencies&amp;#34;: [&amp;#34;web-services&amp;#34;], &amp;#34;templates&amp;#34; : [&amp;#34;dockerfile&amp;#34;, &amp;#34;rest-basic&amp;#34;], &amp;#34;settings&amp;#34;: { &amp;#34;disableDependencySort&amp;#34;: false, &amp;#34;disableKotlinUpgrade&amp;#34;: false, &amp;#34;disableSpringBootUpgrade&amp;#34;: false, &amp;#34;disableUpgradesFor&amp;#34;: [ { &amp;#34;groupId&amp;#34;: &amp;#34;com.example&amp;#34;, &amp;#34;artifactId&amp;#34;: &amp;#34;artifactId&amp;#34; } ], &amp;#34;maxVersionForDependencies&amp;#34;: [ { &amp;#34;groupId&amp;#34;: &amp;#34;com.</description>
    </item>
    
    <item>
      <title>Basics</title>
      <link>https://co-pilot-cli.github.io/usage/basics/</link>
      <pubDate>Wed, 30 Sep 2020 12:17:56 +0200</pubDate>
      
      <guid>https://co-pilot-cli.github.io/usage/basics/</guid>
      <description>Most of the co-pilot commands operate on some common principles, target, recursive, and dry-run.
--target By default co-pilot operates on the current folder similar to tools like git. However a custom --target flag is available for most commands and enables the used to use co-pilot ... --target outside of the working folder.
--recursive Recursive mode is enabled with --recursive or -r for most commands. This mode starts by building a list of subprojects on the current target, and iteratively working on each subproject.</description>
    </item>
    
    <item>
      <title>Local</title>
      <link>https://co-pilot-cli.github.io/configuration/local/</link>
      <pubDate>Wed, 30 Sep 2020 10:40:32 +0200</pubDate>
      
      <guid>https://co-pilot-cli.github.io/configuration/local/</guid>
      <description>The first time running co-pilot a ~/.co-pilot configuration folder is created with a ~/.co-pilot/local-config.yaml file. The contents of this file by default are:</description>
    </item>
    
    <item>
      <title>Upgrade</title>
      <link>https://co-pilot-cli.github.io/commands/upgrade/</link>
      <pubDate>Wed, 30 Sep 2020 10:27:44 +0200</pubDate>
      
      <guid>https://co-pilot-cli.github.io/commands/upgrade/</guid>
      <description>Upgrade is a command for upgrading all or specific parts of a project.
Help Perform upgrade on existing projects Usage: co-pilot upgrade [command] Available Commands: 2party Upgrade all 2party dependencies to project 3party Upgrade all 3party dependencies to project all Upgrade everything in project dependency Upgrade a specific dependency on a project deprecated Remove and replace deprecated dependencies in a project interactive Interactively upgrade the project kotlin Upgrade kotlin version in project plugins Upgrade all plugins found in project spring-boot Upgrade spring-boot to the latest version Flags: --cloud-sync force cloud sync --dry-run dry run does not write to pom.</description>
    </item>
    
    <item>
      <title>Status</title>
      <link>https://co-pilot-cli.github.io/commands/status/</link>
      <pubDate>Wed, 30 Sep 2020 10:27:42 +0200</pubDate>
      
      <guid>https://co-pilot-cli.github.io/commands/status/</guid>
      <description>Status is a command for printing status on a co-pilot project. By default it outputs available upgrades.
Help Status functionality for a project Usage: co-pilot status [flags] Flags: --cloud-sync force cloud sync -h, --help help for status -r, --recursive turn on recursive mode --show show project status --target string optional target directory (default &amp;#34;.&amp;#34;) Global Flags: --debug turn on debug output Example usage co-pilot status Example output INFO[0000] Project status for file .</description>
    </item>
    
    <item>
      <title>Merge</title>
      <link>https://co-pilot-cli.github.io/commands/merge/</link>
      <pubDate>Wed, 30 Sep 2020 10:27:39 +0200</pubDate>
      
      <guid>https://co-pilot-cli.github.io/commands/merge/</guid>
      <description>Merge is a standalone command for merging a specific template into a target. It is the same process used iteratively by generate
Help Merge functionalities for files to a project Usage: co-pilot merge [command] Available Commands: pom Merges a pom-file into a project template Merges a template from co-pilot-config text Merges two text files Flags: --from string file to merge -h, --help help for merge Global Flags: --debug turn on debug output Use &amp;#34;co-pilot merge [command] --help&amp;#34; for more information about a command.</description>
    </item>
    
    <item>
      <title>Init</title>
      <link>https://co-pilot-cli.github.io/commands/init/</link>
      <pubDate>Wed, 30 Sep 2020 10:27:32 +0200</pubDate>
      
      <guid>https://co-pilot-cli.github.io/commands/init/</guid>
      <description>Initializes a project with co-pilot files like co-pilot.json. The command also overwrites the pom.xml files with standard formatting and sorting.
Help Initializes a maven project with co-pilot files and formatting Usage: co-pilot init [flags] Flags: --config-file string Optional config file --dry-run dry run does not write to pom.xml -h, --help help for init -r, --recursive turn on recursive mode --target string Optional target directory (default &amp;#34;.&amp;#34;) Global Flags: --debug turn on debug output </description>
    </item>
    
    <item>
      <title>Info</title>
      <link>https://co-pilot-cli.github.io/commands/info/</link>
      <pubDate>Wed, 30 Sep 2020 10:27:29 +0200</pubDate>
      
      <guid>https://co-pilot-cli.github.io/commands/info/</guid>
      <description>Info is a command for printing various non-project information like spring-info, spring-managed dependencies, and which maven-repositories are defined by mvn
Help Prints info on spring version, dependencies etc Usage: co-pilot info [flags] Flags: -h, --help help for info --maven-repositories show current maven repositories --spring-info show spring boot status --spring-managed show spring boot managed dependencies info Global Flags: --debug turn on debug output </description>
    </item>
    
    <item>
      <title>Generate</title>
      <link>https://co-pilot-cli.github.io/commands/generate/</link>
      <pubDate>Wed, 30 Sep 2020 10:27:20 +0200</pubDate>
      
      <guid>https://co-pilot-cli.github.io/commands/generate/</guid>
      <description>Generate initializes a spring boot project using https://start.spring.io.
Help Initializes a maven project with co-pilot files and formatting Usage: co-pilot generate [flags] Flags: --config-file string Optional config file --disable-upgrading dont upgrade dependencies -h, --help help for generate -i, --interactive Interactive mode --target string Optional target directory (default &amp;#34;.&amp;#34;) Global Flags: --debug turn on debug output Example co-pilot.json file { &amp;#34;language&amp;#34;: &amp;#34;kotlin&amp;#34;, &amp;#34;groupId&amp;#34;: &amp;#34;com.example&amp;#34;, &amp;#34;artifactId&amp;#34;: &amp;#34;app&amp;#34;, &amp;#34;package&amp;#34;: &amp;#34;com.example.app&amp;#34;, &amp;#34;name&amp;#34;: &amp;#34;Example REST basic app&amp;#34;, &amp;#34;team&amp;#34;: { &amp;#34;name&amp;#34;: &amp;#34;demo-name&amp;#34;, &amp;#34;email&amp;#34;: &amp;#34;demo-email@example.</description>
    </item>
    
    <item>
      <title>Format</title>
      <link>https://co-pilot-cli.github.io/commands/format/</link>
      <pubDate>Wed, 30 Sep 2020 10:27:18 +0200</pubDate>
      
      <guid>https://co-pilot-cli.github.io/commands/format/</guid>
      <description>Help Format functionality for a project Usage: co-pilot format [command] Available Commands: inherit Removes manual versions from spring dependencies pom Formats pom.xml and sorts dependencies version Removes version tags and replaces them with property tags Flags: --dry-run dry run does not write to pom.xml -h, --help help for format -r, --recursive turn on recursive mode --target string Optional target directory (default &amp;#34;.&amp;#34;) Global Flags: --debug turn on debug output Use &amp;#34;co-pilot format [command] --help&amp;#34; for more information about a command.</description>
    </item>
    
    <item>
      <title>Config</title>
      <link>https://co-pilot-cli.github.io/commands/config/</link>
      <pubDate>Wed, 30 Sep 2020 10:27:11 +0200</pubDate>
      
      <guid>https://co-pilot-cli.github.io/commands/config/</guid>
      <description>Help Config settings for co-pilot Usage: co-pilot config [flags] Flags: --cloud-sync sync with cloud config repo -h, --help help for config --reset reset local config --show show local config Global Flags: --debug turn on debug output </description>
    </item>
    
    <item>
      <title>Clean</title>
      <link>https://co-pilot-cli.github.io/commands/clean/</link>
      <pubDate>Wed, 30 Sep 2020 10:27:03 +0200</pubDate>
      
      <guid>https://co-pilot-cli.github.io/commands/clean/</guid>
      <description>Help Clean files and folder in a project Usage: co-pilot clean [flags] Flags: --dry-run dry run does not write to pom.xml -h, --help help for clean --ide removes .idea folders and *.iml files -r, --recursive turn on recursive mode --target string Optional target directory (default &amp;#34;.&amp;#34;) Global Flags: --debug turn on debug output Example usage co-pilot clean --ide --target webservice Example output INFO[0000] Deleted 0 files and 0 directories </description>
    </item>
    
    <item>
      <title>Analyze</title>
      <link>https://co-pilot-cli.github.io/commands/analyze/</link>
      <pubDate>Wed, 30 Sep 2020 10:27:00 +0200</pubDate>
      
      <guid>https://co-pilot-cli.github.io/commands/analyze/</guid>
      <description>Dependencies Some of these commands depends on:
 mvn  Help Perform an analyze on a projects Usage: co-pilot analyze [flags] Flags: --deps Show dependency usage -h, --help help for analyze -r, --recursive recursive mode -t, --target string optional target directory (default &amp;#34;.&amp;#34;) Global Flags: --debug turn on debug output Example usage co-pilot analyze --deps --target webservice Example output INFO[0000] Undeclared and unused dependencies for file webservice/pom.xml INFO[0005] unused declared dependencies com.</description>
    </item>
    
  </channel>
</rss>
